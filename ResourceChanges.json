{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "logicAppName": {
            "defaultValue": "ResourceChanges",
            "type": "String"
        },
        "saName": {
            "type": "String"
        },
        "saKey": {
            "type": "String"
        },
        "saContainer": {
            "type": "String",
            "metadata": {
                "description": "Container in the storage account to place the report"
            }
        },
        "laSubscriptionId": {
            "type": "String",
            "metadata": {
                "description": "Subscirption Id where Log Analytics WS is located"
            }
        },
        "laResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "Resource Group name where Log Analytics WS is located"
            }
        },
        "laName": {
            "type": "String",
            "metadata": {
                "description": "Name of the Log Analytics WS"
            }
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "azureblob",
            "location": "[resourceGroup().location]",
            "properties": {
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "displayName": "Resource Report Blob",
                "parameterValues": {
                    "accountName": "[parameters('saName')]",
                    "accessKey": "[parameters('saKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "azuremonitorlogs",
            "location": "[resourceGroup().location]",
            "properties": {
                "api": {
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                },
                "displayName": "Log Analytics WS",
                "parameterValues": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('logicAppName')]",
            "location": "eastus",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', 'azureblob')]",
                "[resourceId('Microsoft.Web/connections', 'azuremonitorlogs')]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {}
                            }
                        }
                    },
                    "actions": {
                        "Create_HTML_table": {
                            "runAfter": {
                                "Sort_and_Display_Results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Table",
                            "inputs": {
                                "columns": [
                                    {
                                        "header": "TimeStamp",
                                        "value": "@item()['TimeStamp']"
                                    },
                                    {
                                        "header": "ResourceId",
                                        "value": "@item()['ResourceId']"
                                    },
                                    {
                                        "header": "ChangeType",
                                        "value": "@item()['ChangeType']"
                                    },
                                    {
                                        "header": "PropertyName",
                                        "value": "@item()['PropertyName']"
                                    },
                                    {
                                        "header": "AfterId",
                                        "value": "@item()['AfterId']"
                                    },
                                    {
                                        "header": "AfterTime",
                                        "value": "@item()['AfterTime']"
                                    },
                                    {
                                        "header": "BeforeId",
                                        "value": "@item()['BeforeId']"
                                    },
                                    {
                                        "header": "BeforeTime",
                                        "value": "@item()['BeforeTime']"
                                    },
                                    {
                                        "header": "AfterValue",
                                        "value": "@item()['AfterValue']"
                                    },
                                    {
                                        "header": "BeforeValue",
                                        "value": "@item()['BeforeValue']"
                                    }
                                ],
                                "format": "HTML",
                                "from": "@variables('results')"
                            }
                        },
                        "Create_blob": {
                            "runAfter": {
                                "Create_HTML_table": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@base64ToBinary(body('Sort_and_Display_Results')?['attachmentContent'])",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/default/files",
                                "queries": {
                                    "folderPath": "[concat('/',parameters('saContainer'))]",
                                    "name": "[concat(parameters('logicAppName'), '@{formatDateTime(adddays(utcNow(),-1),''yyyyMMdd'')}.html')]",
                                    "queryParametersSingleEncoded": true
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        },
                        "For_each": {
                            "foreach": "@body('List_Resources_with_Changes')?['value']",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "For_each_Change": {
                                            "foreach": "@body('Parse_JSON')?['changes']",
                                            "actions": {
                                                "For_each_propertyChange": {
                                                    "foreach": "@items('For_each_Change')?['propertyChanges']",
                                                    "actions": {
                                                        "Condition_2": {
                                                            "actions": {
                                                                "Append_to_array_variable": {
                                                                    "runAfter": {},
                                                                    "type": "AppendToArrayVariable",
                                                                    "inputs": {
                                                                        "name": "results",
                                                                        "value": {
                                                                            "AfterId": "@{body('Parse_ChangeId')?['afterId']}",
                                                                            "AfterTime": "@{body('Parse_ChangeId')?['afterTime']}",
                                                                            "AfterValue": "@{body('Parse_propertyChange')?['afterValue']}",
                                                                            "BeforeId": "@{body('Parse_ChangeId')?['beforeId']}",
                                                                            "BeforeTime": "@{body('Parse_ChangeId')?['beforeTime']}",
                                                                            "BeforeValue": "@{body('Parse_propertyChange')?['beforeValue']}",
                                                                            "ChangeType": "@{items('For_each_Change')?['changeType']}",
                                                                            "PropertyChangeType": "@{body('Parse_propertyChange')?['propertyChangeType']}",
                                                                            "PropertyName": "@{body('Parse_propertyChange')?['propertyName']}",
                                                                            "ResourceId": "@{items('For_each')?['ResourceId']}",
                                                                            "TimeStamp": " @{items('For_each_Change')?['afterSnapshot']?['timestamp']}"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Parse_propertyChange": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "not": {
                                                                            "equals": [
                                                                                "@body('Parse_propertyChange')?['propertyName']",
                                                                                "properties.lastStatusChange"
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        },
                                                        "Parse_propertyChange": {
                                                            "runAfter": {},
                                                            "type": "ParseJson",
                                                            "inputs": {
                                                                "content": "@items('For_each_propertyChange')",
                                                                "schema": {
                                                                    "properties": {
                                                                        "afterValue": {
                                                                            "type": "string"
                                                                        },
                                                                        "beforeValue": {
                                                                            "type": "string"
                                                                        },
                                                                        "changeCategory": {
                                                                            "type": "string"
                                                                        },
                                                                        "changeType": {
                                                                            "type": "string"
                                                                        },
                                                                        "propertyChangeType": {
                                                                            "type": "string"
                                                                        },
                                                                        "propertyName": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_ChangeId": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach"
                                                },
                                                "Parse_ChangeId": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@items('For_each_Change')?['changeId']",
                                                        "schema": {
                                                            "properties": {
                                                                "afterId": {
                                                                    "type": "string"
                                                                },
                                                                "afterTime": {
                                                                    "type": "string"
                                                                },
                                                                "beforeId": {
                                                                    "type": "string"
                                                                },
                                                                "beforeTime": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {},
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP')",
                                                "schema": {
                                                    "properties": {
                                                        "changes": {
                                                            "items": {
                                                                "properties": {
                                                                    "afterSnapshot": {
                                                                        "properties": {
                                                                            "snapshotId": {
                                                                                "type": "string"
                                                                            },
                                                                            "timestamp": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "beforeSnapshot": {
                                                                        "properties": {
                                                                            "snapshotId": {
                                                                                "type": "string"
                                                                            },
                                                                            "timestamp": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "changeId": {
                                                                        "type": "string"
                                                                    },
                                                                    "changeType": {
                                                                        "type": "string"
                                                                    },
                                                                    "propertyChanges": {
                                                                        "items": {
                                                                            "properties": {
                                                                                "afterValue": {
                                                                                    "type": "string"
                                                                                },
                                                                                "beforeValue": {
                                                                                    "type": "string"
                                                                                },
                                                                                "changeCategory": {
                                                                                    "type": "string"
                                                                                },
                                                                                "changeType": {
                                                                                    "type": "string"
                                                                                },
                                                                                "propertyChangeType": {
                                                                                    "type": "string"
                                                                                },
                                                                                "propertyName": {
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "changeCategory",
                                                                                "changeType",
                                                                                "propertyChangeType",
                                                                                "propertyName"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "changeId"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_Header": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP')['statusCode']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "audience": "https://management.azure.com",
                                            "type": "ManagedServiceIdentity"
                                        },
                                        "body": {
                                            "fetchPropertyChanges": true,
                                            "interval": {
                                                "end": "@{variables('endTime')}",
                                                "start": "@{variables('startTime')}"
                                            },
                                            "resourceId": "@{items('For_each')?['ResourceId']}"
                                        },
                                        "method": "POST",
                                        "uri": "https://management.azure.com/providers/Microsoft.ResourceGraph/resourceChanges?api-version=2018-09-01-preview"
                                    }
                                },
                                "Parse_Header": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@outputs('HTTP')['headers']",
                                        "schema": {
                                            "properties": {
                                                "Cache-Control": {
                                                    "type": "string"
                                                },
                                                "Content-Length": {
                                                    "type": "string"
                                                },
                                                "Content-Type": {
                                                    "type": "string"
                                                },
                                                "Date": {
                                                    "type": "string"
                                                },
                                                "Expires": {
                                                    "type": "string"
                                                },
                                                "Pragma": {
                                                    "type": "string"
                                                },
                                                "Server": {
                                                    "type": "string"
                                                },
                                                "Strict-Transport-Security": {
                                                    "type": "string"
                                                },
                                                "Transfer-Encoding": {
                                                    "type": "string"
                                                },
                                                "Vary": {
                                                    "type": "string"
                                                },
                                                "X-Content-Type-Options": {
                                                    "type": "string"
                                                },
                                                "x-ms-correlation-request-id": {
                                                    "type": "string"
                                                },
                                                "x-ms-ratelimit-remaining-tenant-reads": {
                                                    "type": "string"
                                                },
                                                "x-ms-ratelimit-remaining-tenant-resource-requests": {
                                                    "type": "string"
                                                },
                                                "x-ms-request-id": {
                                                    "type": "string"
                                                },
                                                "x-ms-routing-request-id": {
                                                    "type": "string"
                                                },
                                                "x-ms-user-quota-remaining": {
                                                    "type": "string"
                                                },
                                                "x-ms-user-quota-resets-after": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "List_Resources_with_Changes": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_results": {
                            "runAfter": {
                                "Set_endTime": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "results",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "List_Resources_with_Changes": {
                            "runAfter": {
                                "Initialize_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "AzureActivity\n| where TimeGenerated between (todatetime(\"@{variables('startTime')}\") .. todatetime(\"@{variables('endTime')}\"))\n| where Category == 'Administrative'\n| distinct ResourceId",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "[parameters('laResourceGroup')]",
                                    "resourcename": "[parameters('laName')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[parameters('laSubscriptionId')]",
                                    "timerange": "2d"
                                }
                            }
                        },
                        "Set_endTime": {
                            "runAfter": {
                                "Set_startTime": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "endTime",
                                        "type": "string",
                                        "value": "@{startOfDay(utcNow(),'M/d/yyyy H:mm:ss tt')}"
                                    }
                                ]
                            }
                        },
                        "Set_startTime": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "startTime",
                                        "type": "string",
                                        "value": "@{startofday(addDays(utcNow(),-1),'M/d/yyyy H:mm:ss tt')}"
                                    }
                                ]
                            }
                        },
                        "Sort_and_Display_Results": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "let result = print myDynamicValue = dynamic( @{variables('results')})\n| mvexpand myDynamicValue\n| evaluate bag_unpack(myDynamicValue)\n| where PropertyName !~ 'properties.status'\n| project TimeStamp, ResourceId, ChangeType, PropertyName, AfterTime, AfterValue, BeforeTime, BeforeValue, AfterId\n| sort by TimeStamp asc, AfterId;\nresult",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/visualizeQuery",
                                "queries": {
                                    "resourcegroups": "[parameters('laResourceGroup')]",
                                    "resourcename": "[parameters('laName')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[parameters('laSubscriptionId')]",
                                    "timerange": "5m",
                                    "visType": "Html Table"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'azureblob')]",
                                "connectionName": "azureblob",
                                "id": "[reference(concat('Microsoft.Web/connections/', 'azureblob'), '2016-06-01').api.id]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', 'azuremonitorlogs')]",
                                "connectionName": "azuremonitorlogs",
                                "id": "[reference(concat('Microsoft.Web/connections/', 'azuremonitorlogs'), '2016-06-01').api.id]"
                            }
                        }
                    }
                }
            }
        }
    ]
}